 !_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BASE_PART_SURF_PATTERN	constants.py	/^BASE_PART_SURF_PATTERN = re.compile(r"^P(\\d+)([a-z]+)$")  # "P1a"$/;"	v
BASE_SURFACE_TYPES	constants.py	/^BASE_SURFACE_TYPES = ["plane", "cylinder", "cone", "sphere"]$/;"	v
BASIS_DICT	constants.py	/^BASIS_DICT = {$/;"	v
CONTACT_TYPES	constants.py	/^CONTACT_TYPES = ["FIXED", "SLIDING", "FLOATING"]$/;"	v
CONTACT_TYPE_TO_GAP_DOF	constants.py	/^CONTACT_TYPE_TO_GAP_DOF = {$/;"	v
CompatibilityLoopHandling	compatibilityLoopHandling.py	/^class CompatibilityLoopHandling:$/;"	c
D_MATRIX_MSTRING_PATTERN	constants.py	/^D_MATRIX_MSTRING_PATTERN = re.compile(r"^D(\\d+)([a-z]+)$")  # "D1a"$/;"	v
D_MATRIX_PATTERN1	constants.py	/^D_MATRIX_PATTERN1 = re.compile(r"^D(i*)(\\d+)([a-z]+)$")  # "D1a"\/"Di1a$/;"	v
D_MATRIX_PATTERN2	constants.py	/^D_MATRIX_PATTERN2 = re.compile(r"^D(i*)(\\d+)([a-z]+)([A-Z]+\\d+)$")  # "D1aA5"$/;"	v
D_MATRIX_PATTERN3	constants.py	/^D_MATRIX_PATTERN3 = re.compile(r"^D(i*)(\\d+)([a-z]+)(\\d+)([a-z]+)$")  # "D1a5b"$/;"	v
DeviationMatrix	denavitTolerancingBasicObjects.py	/^class DeviationMatrix:$/;"	c
DuplicatePointError	customExceptions.py	/^class DuplicatePointError(ValueError):$/;"	c
GLOBAL_CONSTRAINTS_TO_DEVIATION_DOF	constants.py	/^GLOBAL_CONSTRAINTS_TO_DEVIATION_DOF = {$/;"	v
GLOBAL_CONSTRAINTS_TO_GAP_DOF	constants.py	/^GLOBAL_CONSTRAINTS_TO_GAP_DOF = {$/;"	v
G_MATRIX_MSTRING_PATTERN	constants.py	/^G_MATRIX_MSTRING_PATTERN = re.compile($/;"	v
G_MATRIX_PATTERN1	constants.py	/^G_MATRIX_PATTERN1 = re.compile($/;"	v
G_MATRIX_PATTERN2	constants.py	/^G_MATRIX_PATTERN2 = re.compile(r"^GP(i*)(\\d+)([a-z]+)P(\\d+)([a-z]+)$")$/;"	v
GapMatrix	denavitTolerancingBasicObjects.py	/^class GapMatrix:$/;"	c
GapMatrixProcessor	interfaceLoopHandling.py	/^class GapMatrixProcessor:$/;"	c
GeometricConditionError	customExceptions.py	/^class GeometricConditionError(Exception):$/;"	c
I4	denavitTolerancingBasicObjects.py	/^class I4:$/;"	c
InterfaceLoopBuilder	interfaceLoopHandling.py	/^class InterfaceLoopBuilder:$/;"	c
InterfaceLoopHandling	interfaceLoopHandling.py	/^class InterfaceLoopHandling:$/;"	c
InvalidGlobalConstraintError	customExceptions.py	/^class InvalidGlobalConstraintError(ValueError):$/;"	c
InvalidInteractionFormatError	customExceptions.py	/^class InvalidInteractionFormatError(ValueError):$/;"	c
InvalidPartLabelError	customExceptions.py	/^class InvalidPartLabelError(ValueError):$/;"	c
InvalidSurfaceLabelError	customExceptions.py	/^class InvalidSurfaceLabelError(ValueError):$/;"	c
J4	denavitTolerancingBasicObjects.py	/^class J4:$/;"	c
LOC_STAMP_PATTERN	constants.py	/^LOC_STAMP_PATTERN = re.compile(r"^P(\\d+)([a-z]+)([A-Z]+\\d+)$")  # "P1aA5"$/;"	v
LOOP_ELEMENT_PATTERN	constants.py	/^LOOP_ELEMENT_PATTERN = re.compile(r"^P\\d+[a-z]+[A-Z]+\\d+$")  # "P1aA5"$/;"	v
LabelPatternError	customExceptions.py	/^class LabelPatternError(ValueError):$/;"	c
LabelPrefixError	customExceptions.py	/^class LabelPrefixError(ValueError):$/;"	c
MatrixListsFromSystemData	matrixListsFromSystemData.py	/^class MatrixListsFromSystemData:$/;"	c
MatrixPolynomeTaylorExpansion	matrixPolynomeTaylorExpansion.py	/^class MatrixPolynomeTaylorExpansion:$/;"	c
MissingKeyError	customExceptions.py	/^class MissingKeyError(KeyError):$/;"	c
MissingOriginPointError	customExceptions.py	/^class MissingOriginPointError(PointDictionaryError):$/;"	c
MissingSurfaceTypeKeyError	customExceptions.py	/^class MissingSurfaceTypeKeyError(KeyError):$/;"	c
NonConcentricCylindersException	customExceptions.py	/^class NonConcentricCylindersException(Exception):$/;"	c
NonUniqueCoordinatesError	customExceptions.py	/^class NonUniqueCoordinatesError(ValueError):$/;"	c
NonUniqueLabelError	customExceptions.py	/^class NonUniqueLabelError(PointDictionaryError):$/;"	c
PartNotFoundError	customExceptions.py	/^class PartNotFoundError(ValueError):$/;"	c
PointDictionaryError	customExceptions.py	/^class PointDictionaryError(ValueError):$/;"	c
PointsNotOnPlaneError	customExceptions.py	/^class PointsNotOnPlaneError(Exception):$/;"	c
SURFACE_DICT_VALUE_CHECKS	constants.py	/^SURFACE_DICT_VALUE_CHECKS = {$/;"	v
SURFACE_DIRECTIONS	constants.py	/^SURFACE_DIRECTIONS = ["centripetal", "centrifugal"]$/;"	v
SURF_ORIGIN_PATTERN	constants.py	/^SURF_ORIGIN_PATTERN = re.compile(r"[A-Z]+0+$")  # "AA0000"$/;"	v
SURF_POINT_PATTERN	constants.py	/^SURF_POINT_PATTERN = re.compile(r"[A-Z]+[0-9]+$")  # "AA01"$/;"	v
SURF_TYPE_TO_DEVIATION_DOF	constants.py	/^SURF_TYPE_TO_DEVIATION_DOF = {$/;"	v
SurfaceInteractionManager	interfaceLoopHandling.py	/^class SurfaceInteractionManager:$/;"	c
SurfaceNotFoundError	customExceptions.py	/^class SurfaceNotFoundError(ValueError):$/;"	c
SystemDataAugmented	systemDataAugmented.py	/^class SystemDataAugmented:$/;"	c
T_MATRIX_PATTERN	constants.py	/^T_MATRIX_PATTERN = re.compile($/;"	v
ToleranceAnalysisMatrixPreparer	toleranceAnalysisMatrixPreparer.py	/^class ToleranceAnalysisMatrixPreparer:$/;"	c
TransformationMatrix	denavitTolerancingBasicObjects.py	/^class TransformationMatrix:$/;"	c
UniqueLabelSuffixError	customExceptions.py	/^class UniqueLabelSuffixError(ValueError):$/;"	c
UnsupportedSurfaceTypeError	customExceptions.py	/^class UnsupportedSurfaceTypeError(ValueError):$/;"	c
__all__	__init__.py	/^__all__ = ($/;"	v
__all__	compatibilityLoopHandling.py	/^__all__ = ["CompatibilityLoopHandling"]$/;"	v
__all__	constants.py	/^__all__ = [$/;"	v
__all__	customExceptions.py	/^__all__ = [$/;"	v
__all__	customPlotting.py	/^__all__ = ["plot_points_3D", "spheres_from_point_cloud", "hex_to_rgba"]$/;"	v
__all__	denavitTolerancingBasicObjects.py	/^__all__ = [$/;"	v
__all__	geometryFunctions.py	/^__all__ = [$/;"	v
__all__	impreciseTolerancingMiscMethods.py	/^__all__ = [$/;"	v
__all__	interfaceLoopHandling.py	/^__all__ = ["InterfaceLoopHandling"]$/;"	v
__all__	matrixListsFromSystemData.py	/^__all__ = ["MatrixListsFromSystemData"]$/;"	v
__all__	matrixPolynomeTaylorExpansion.py	/^__all__ = ["MatrixPolynomeTaylorExpansion"]$/;"	v
__all__	symbolicFunctionHandlers.py	/^__all__ = [$/;"	v
__all__	systemDataAugmented.py	/^__all__ = ["SystemDataAugmented"]$/;"	v
__all__	toleranceAnalysisMatrixPreparer.py	/^__all__ = ["ToleranceAnalysisMatrixPreparer", "get_gap_symbol_bounds"]$/;"	v
__author__	__init__.py	/^__author__ = "Kramer84"$/;"	v
__author__	compatibilityLoopHandling.py	/^__author__ = "Kramer84"$/;"	v
__author__	constants.py	/^__author__ = "Kramer84"$/;"	v
__author__	customExceptions.py	/^__author__ = "Kramer84"$/;"	v
__author__	customPlotting.py	/^__author__ = "Kramer84"$/;"	v
__author__	denavitTolerancingBasicObjects.py	/^__author__ = "Kramer84"$/;"	v
__author__	geometryFunctions.py	/^__author__ = "Kramer84"$/;"	v
__author__	impreciseTolerancingMiscMethods.py	/^__author__ = "Kramer84"$/;"	v
__author__	interfaceLoopHandling.py	/^__author__ = "Kramer84"$/;"	v
__author__	matrixListsFromSystemData.py	/^__author__ = "Kramer84"$/;"	v
__author__	matrixPolynomeTaylorExpansion.py	/^__author__ = "Kramer84"$/;"	v
__author__	symbolicFunctionHandlers.py	/^__author__ = "Kramer84"$/;"	v
__author__	systemDataAugmented.py	/^__author__ = "Kramer84"$/;"	v
__author__	toleranceAnalysisMatrixPreparer.py	/^__author__ = "Kramer84"$/;"	v
__call__	toleranceAnalysisMatrixPreparer.py	/^    def __call__($/;"	m	class:ToleranceAnalysisMatrixPreparer	file:
__check_loop_order	systemDataAugmented.py	/^    def __check_loop_order(self, part_surf_point: List[Tuple[str, str, str]]) -> bool:$/;"	m	class:SystemDataAugmented	file:
__expand_loop	systemDataAugmented.py	/^    def __expand_loop(self, compact_loop_str: str) -> str:$/;"	m	class:SystemDataAugmented	file:
__generate_expanded_loop	systemDataAugmented.py	/^    def __generate_expanded_loop($/;"	m	class:SystemDataAugmented	file:
__getitem__	systemDataAugmented.py	/^    def __getitem__(self, key):$/;"	m	class:SystemDataAugmented	file:
__handle_loop_closure	systemDataAugmented.py	/^    def __handle_loop_closure($/;"	m	class:SystemDataAugmented	file:
__init__	compatibilityLoopHandling.py	/^    def __init__(self, systemDataAugmented: otaf.SystemDataAugmented):$/;"	m	class:CompatibilityLoopHandling
__init__	customExceptions.py	/^    def __init__(self):$/;"	m	class:InvalidPartLabelError
__init__	customExceptions.py	/^    def __init__(self):$/;"	m	class:InvalidSurfaceLabelError
__init__	customExceptions.py	/^    def __init__(self):$/;"	m	class:LabelPatternError
__init__	customExceptions.py	/^    def __init__(self):$/;"	m	class:LabelPrefixError
__init__	customExceptions.py	/^    def __init__(self):$/;"	m	class:NonUniqueCoordinatesError
__init__	customExceptions.py	/^    def __init__(self):$/;"	m	class:UniqueLabelSuffixError
__init__	customExceptions.py	/^    def __init__(self, condition_name):$/;"	m	class:GeometricConditionError
__init__	customExceptions.py	/^    def __init__(self, interaction: str):$/;"	m	class:InvalidInteractionFormatError
__init__	customExceptions.py	/^    def __init__(self, key, dictionary_name):$/;"	m	class:MissingKeyError
__init__	customExceptions.py	/^    def __init__(self, message):$/;"	m	class:NonUniqueLabelError
__init__	customExceptions.py	/^    def __init__(self, message):$/;"	m	class:PointDictionaryError
__init__	customExceptions.py	/^    def __init__(self, part_id):$/;"	m	class:PartNotFoundError
__init__	customExceptions.py	/^    def __init__(self, part_id, surf_id):$/;"	m	class:MissingOriginPointError
__init__	customExceptions.py	/^    def __init__(self, part_id, surf_id):$/;"	m	class:MissingSurfaceTypeKeyError
__init__	customExceptions.py	/^    def __init__(self, part_id, surf_id):$/;"	m	class:PointsNotOnPlaneError
__init__	customExceptions.py	/^    def __init__(self, part_id, surf_id, surf_type):$/;"	m	class:UnsupportedSurfaceTypeError
__init__	customExceptions.py	/^    def __init__(self, part_id1, surface_id1, part_id2, surface_id2):$/;"	m	class:NonConcentricCylindersException
__init__	customExceptions.py	/^    def __init__(self, point_name, surf_id, existing_point=None, origin=False):$/;"	m	class:DuplicatePointError
__init__	customExceptions.py	/^    def __init__(self, surf_id, part_id):$/;"	m	class:SurfaceNotFoundError
__init__	customExceptions.py	/^    def __init__(self, valid_constraints):$/;"	m	class:InvalidGlobalConstraintError
__init__	denavitTolerancingBasicObjects.py	/^    def __init__($/;"	m	class:DeviationMatrix
__init__	denavitTolerancingBasicObjects.py	/^    def __init__($/;"	m	class:GapMatrix
__init__	denavitTolerancingBasicObjects.py	/^    def __init__($/;"	m	class:TransformationMatrix
__init__	denavitTolerancingBasicObjects.py	/^    def __init__(self):$/;"	m	class:I4
__init__	denavitTolerancingBasicObjects.py	/^    def __init__(self):$/;"	m	class:J4
__init__	interfaceLoopHandling.py	/^    def __init__(self, compatibility_loop_handling, gap_matrix_processor):$/;"	m	class:InterfaceLoopBuilder
__init__	interfaceLoopHandling.py	/^    def __init__(self, system_data_augmented):$/;"	m	class:GapMatrixProcessor
__init__	interfaceLoopHandling.py	/^    def __init__(self, system_data_augmented):$/;"	m	class:SurfaceInteractionManager
__init__	interfaceLoopHandling.py	/^    def __init__(self, system_data_augmented, compatibility_loop_handling):$/;"	m	class:InterfaceLoopHandling
__init__	matrixListsFromSystemData.py	/^    def __init__(self, system_data: Dict[str, Dict[str, Dict[str, Any]]]):$/;"	m	class:MatrixListsFromSystemData
__init__	matrixPolynomeTaylorExpansion.py	/^    def __init__($/;"	m	class:MatrixPolynomeTaylorExpansion
__init__	systemDataAugmented.py	/^    def __init__($/;"	m	class:SystemDataAugmented
__init__	toleranceAnalysisMatrixPreparer.py	/^    def __init__($/;"	m	class:ToleranceAnalysisMatrixPreparer
__repr__	denavitTolerancingBasicObjects.py	/^    def __repr__(self):$/;"	m	class:DeviationMatrix	file:
__repr__	denavitTolerancingBasicObjects.py	/^    def __repr__(self):$/;"	m	class:GapMatrix	file:
__repr__	denavitTolerancingBasicObjects.py	/^    def __repr__(self):$/;"	m	class:TransformationMatrix	file:
__requires__	__init__.py	/^__requires__ = [$/;"	v
__validate_loop_element	systemDataAugmented.py	/^    def __validate_loop_element(self, loop_element: str) -> None:$/;"	m	class:SystemDataAugmented	file:
_check_loop_order	matrixListsFromSystemData.py	/^    def _check_loop_order(self, part_surf_point: List[Tuple[str, str, str]]) -> bool:$/;"	m	class:MatrixListsFromSystemData
_compute_constant_term	matrixPolynomeTaylorExpansion.py	/^    def _compute_constant_term(self) -> sp.MatrixBase:$/;"	m	class:MatrixPolynomeTaylorExpansion
_compute_first_order_element	matrixPolynomeTaylorExpansion.py	/^    def _compute_first_order_element($/;"	m	class:MatrixPolynomeTaylorExpansion
_generate_expanded_loop	matrixListsFromSystemData.py	/^    def _generate_expanded_loop($/;"	m	class:MatrixListsFromSystemData
_generate_points_for_cylinder	systemDataAugmented.py	/^    def _generate_points_for_cylinder(self, part_id: str, surf_id: str) -> None:$/;"	m	class:SystemDataAugmented
_generate_points_for_plane	systemDataAugmented.py	/^    def _generate_points_for_plane(self, part_id: str, surf_id: str) -> None:$/;"	m	class:SystemDataAugmented
_handle_loop_closure	matrixListsFromSystemData.py	/^    def _handle_loop_closure($/;"	m	class:MatrixListsFromSystemData
_initialize_basis_variables	denavitTolerancingBasicObjects.py	/^    def _initialize_basis_variables(self):$/;"	m	class:DeviationMatrix
_initialize_basis_variables	denavitTolerancingBasicObjects.py	/^    def _initialize_basis_variables(self):$/;"	m	class:GapMatrix
_initialize_empty_system_data	systemDataAugmented.py	/^    def _initialize_empty_system_data(self) -> Dict[str, Dict[str, Dict[str, Any]]]:$/;"	m	class:SystemDataAugmented
add_surface_points	systemDataAugmented.py	/^    def add_surface_points($/;"	m	class:SystemDataAugmented
angle_between_planes	geometryFunctions.py	/^def angle_between_planes(normal1: np.ndarray, normal2: np.ndarray) -> float:$/;"	f
angle_between_vectors	geometryFunctions.py	/^def angle_between_vectors(vec1: np.ndarray, vec2: np.ndarray) -> float:$/;"	f
apply_FO_matrix_expansion_to_matrix_loop_list	compatibilityLoopHandling.py	/^    def apply_FO_matrix_expansion_to_matrix_loop_list($/;"	m	class:CompatibilityLoopHandling
are_normals_aligned_and_facing	geometryFunctions.py	/^def are_normals_aligned_and_facing($/;"	f
are_planes_coincident	geometryFunctions.py	/^def are_planes_coincident($/;"	f
are_planes_facing	geometryFunctions.py	/^def are_planes_facing($/;"	f
are_planes_parallel	geometryFunctions.py	/^def are_planes_parallel($/;"	f
are_planes_perpendicular	geometryFunctions.py	/^def are_planes_perpendicular($/;"	f
are_points_on_2d_plane	geometryFunctions.py	/^def are_points_on_2d_plane(points: np.ndarray) -> bool:$/;"	f
calculate_cylinder_surface_frame	geometryFunctions.py	/^def calculate_cylinder_surface_frame($/;"	f
calculate_failure_probability	impreciseTolerancingMiscMethods.py	/^def calculate_failure_probability($/;"	f
calculate_nominal_gap_transform	compatibilityLoopHandling.py	/^    def calculate_nominal_gap_transform($/;"	m	class:CompatibilityLoopHandling
calculate_nominal_gap_transform	matrixListsFromSystemData.py	/^    def calculate_nominal_gap_transform($/;"	m	class:MatrixListsFromSystemData
centroid	geometryFunctions.py	/^def centroid(arr: np.ndarray) -> np.ndarray:$/;"	f
closest_point_on_line	geometryFunctions.py	/^def closest_point_on_line($/;"	f
closest_point_on_plane	geometryFunctions.py	/^def closest_point_on_plane($/;"	f
color_palette_1	constants.py	/^color_palette_1 = [  # https:\/\/www.color-hex.com\/color-palette\/23381$/;"	v
color_palette_2	constants.py	/^color_palette_2 = [$/;"	v
color_palette_3	constants.py	/^color_palette_3 = [  # http:\/\/godsnotwheregodsnot.blogspot.com\/2012\/09\/color-distribution-methodology.html$/;"	v
compute_adaptive_failure_probability	impreciseTolerancingMiscMethods.py	/^def compute_adaptive_failure_probability($/;"	f
compute_bounding_box	geometryFunctions.py	/^def compute_bounding_box(points: np.ndarray) -> np.ndarray:$/;"	f
compute_failure_probability_basic	impreciseTolerancingMiscMethods.py	/^def compute_failure_probability_basic($/;"	f
condition_lambda_sample	impreciseTolerancingMiscMethods.py	/^def condition_lambda_sample(sample: ot.Sample) -> ot.Sample:$/;"	f
construct_FO_matrix_expansion	matrixPolynomeTaylorExpansion.py	/^    def construct_FO_matrix_expansion(self, tolerance: float = 1e-8) -> sp.MatrixBase:$/;"	m	class:MatrixPolynomeTaylorExpansion
distance_between_planes	geometryFunctions.py	/^def distance_between_planes($/;"	f
do_bounding_boxes_overlap	geometryFunctions.py	/^def do_bounding_boxes_overlap(bbox1: np.ndarray, bbox2: np.ndarray) -> bool:$/;"	f
euclidean_distance	geometryFunctions.py	/^def euclidean_distance(point1: np.ndarray, point2: np.ndarray) -> float:$/;"	f
expand_loop	matrixListsFromSystemData.py	/^    def expand_loop(self, compact_loop_str: str) -> str:$/;"	m	class:MatrixListsFromSystemData
extractFreeGapAndDeviationVariables	toleranceAnalysisMatrixPreparer.py	/^    def extractFreeGapAndDeviationVariables($/;"	m	class:ToleranceAnalysisMatrixPreparer
extract_matching_gap_points_from_expanded_loops	matrixListsFromSystemData.py	/^    def extract_matching_gap_points_from_expanded_loops(self) -> Dict[str, str]:$/;"	m	class:MatrixListsFromSystemData
extract_unique_gap_matrices_from_expanded_loops	interfaceLoopHandling.py	/^    def extract_unique_gap_matrices_from_expanded_loops(self) -> Set[str]:$/;"	m	class:GapMatrixProcessor
extract_unique_gap_matrices_from_expanded_loops	matrixListsFromSystemData.py	/^    def extract_unique_gap_matrices_from_expanded_loops(self) -> Set[str]:$/;"	m	class:MatrixListsFromSystemData
facing_point_dictionary	interfaceLoopHandling.py	/^    def facing_point_dictionary(self):$/;"	m	class:InterfaceLoopHandling
filemode	__init__.py	/^    filemode="w",$/;"	v
filename	__init__.py	/^    filename="imprecise_overconstrained_tolerance_analysis.log",$/;"	v
filter_gap_matrices	interfaceLoopHandling.py	/^    def filter_gap_matrices($/;"	m	class:GapMatrixProcessor
filter_gap_matrices	matrixListsFromSystemData.py	/^    def filter_gap_matrices($/;"	m	class:MatrixListsFromSystemData
generateConstraintMatrices	toleranceAnalysisMatrixPreparer.py	/^    def generateConstraintMatrices($/;"	m	class:ToleranceAnalysisMatrixPreparer
generate_FO_loop_matrices	compatibilityLoopHandling.py	/^    def generate_FO_loop_matrices(self):$/;"	m	class:CompatibilityLoopHandling
generate_circle_points	geometryFunctions.py	/^def generate_circle_points($/;"	f
generate_circle_points_3d	geometryFunctions.py	/^def generate_circle_points_3d($/;"	f
generate_deviation_matrix	compatibilityLoopHandling.py	/^    def generate_deviation_matrix(self, el_info: dict) -> List[otaf.DeviationMatrix]:$/;"	m	class:CompatibilityLoopHandling
generate_deviation_matrix	matrixListsFromSystemData.py	/^    def generate_deviation_matrix(self, el_info: dict) -> List[otaf.DeviationMatrix]:$/;"	m	class:MatrixListsFromSystemData
generate_expanded_compatibility_loops	matrixListsFromSystemData.py	/^    def generate_expanded_compatibility_loops(self) -> Dict[str, str]:$/;"	m	class:MatrixListsFromSystemData
generate_expanded_loops	systemDataAugmented.py	/^    def generate_expanded_loops(self) -> None:$/;"	m	class:SystemDataAugmented
generate_gap_matrix	compatibilityLoopHandling.py	/^    def generate_gap_matrix($/;"	m	class:CompatibilityLoopHandling
generate_gap_matrix	matrixListsFromSystemData.py	/^    def generate_gap_matrix($/;"	m	class:MatrixListsFromSystemData
generate_gap_matrix_names	interfaceLoopHandling.py	/^    def generate_gap_matrix_names(self) -> Dict[str, Dict[str, Set[str]]]:$/;"	m	class:GapMatrixProcessor
generate_gap_matrix_names	matrixListsFromSystemData.py	/^    def generate_gap_matrix_names(self) -> Dict[str, Dict[str, Set[str]]]:$/;"	m	class:MatrixListsFromSystemData
generate_interface_loop_from_gap_matrix	interfaceLoopHandling.py	/^    def generate_interface_loop_from_gap_matrix($/;"	m	class:InterfaceLoopBuilder
generate_interface_loop_from_gap_matrix	matrixListsFromSystemData.py	/^    def generate_interface_loop_from_gap_matrix($/;"	m	class:MatrixListsFromSystemData
generate_loop_id_to_matrix_list_dict	compatibilityLoopHandling.py	/^    def generate_loop_id_to_matrix_list_dict(self):$/;"	m	class:CompatibilityLoopHandling
generate_matrices_from_expanded_loop	compatibilityLoopHandling.py	/^    def generate_matrices_from_expanded_loop($/;"	m	class:CompatibilityLoopHandling
generate_matrices_from_expanded_loop	matrixListsFromSystemData.py	/^    def generate_matrices_from_expanded_loop($/;"	m	class:MatrixListsFromSystemData
generate_points_for_surface	systemDataAugmented.py	/^    def generate_points_for_surface(self, part_id: str, surf_id: str) -> None:$/;"	m	class:SystemDataAugmented
generate_sphere_clouds	systemDataAugmented.py	/^    def generate_sphere_clouds($/;"	m	class:SystemDataAugmented
generate_transformation_matrix	compatibilityLoopHandling.py	/^    def generate_transformation_matrix($/;"	m	class:CompatibilityLoopHandling
generate_transformation_matrix	matrixListsFromSystemData.py	/^    def generate_transformation_matrix($/;"	m	class:MatrixListsFromSystemData
get_SE3_base	constants.py	/^def get_SE3_base(index: str) -> sp.MatrixBase:$/;"	f
get_SE3_matrices_from_indices	constants.py	/^def get_SE3_matrices_from_indices($/;"	f
get_change_of_basis_matrix	denavitTolerancingBasicObjects.py	/^    def get_change_of_basis_matrix($/;"	m	class:TransformationMatrix
get_compatibility_expression_from_FO_matrices	compatibilityLoopHandling.py	/^    def get_compatibility_expression_from_FO_matrices(self):$/;"	m	class:CompatibilityLoopHandling
get_composed_distribution	impreciseTolerancingMiscMethods.py	/^def get_composed_distribution($/;"	f
get_def_matrix_by_ID	compatibilityLoopHandling.py	/^    def get_def_matrix_by_ID($/;"	m	class:CompatibilityLoopHandling
get_def_matrix_by_ID	matrixListsFromSystemData.py	/^    def get_def_matrix_by_ID($/;"	m	class:MatrixListsFromSystemData
get_facing_point_dict	matrixListsFromSystemData.py	/^    def get_facing_point_dict(self) -> None:$/;"	m	class:MatrixListsFromSystemData
get_facing_point_dictionary	interfaceLoopHandling.py	/^    def get_facing_point_dictionary($/;"	m	class:SurfaceInteractionManager
get_gap_matrix_by_ID	compatibilityLoopHandling.py	/^    def get_gap_matrix_by_ID($/;"	m	class:CompatibilityLoopHandling
get_gap_matrix_by_ID	matrixListsFromSystemData.py	/^    def get_gap_matrix_by_ID($/;"	m	class:MatrixListsFromSystemData
get_gap_symbol_bounds	toleranceAnalysisMatrixPreparer.py	/^def get_gap_symbol_bounds(gap_symbols: List[sp.Symbol]) -> np.ndarray:$/;"	f
get_interface_loops_from_facing_parts	interfaceLoopHandling.py	/^    def get_interface_loops_from_facing_parts($/;"	m	class:InterfaceLoopBuilder
get_interface_loops_from_facing_parts	matrixListsFromSystemData.py	/^    def get_interface_loops_from_facing_parts($/;"	m	class:MatrixListsFromSystemData
get_inverse	denavitTolerancingBasicObjects.py	/^    def get_inverse(self):$/;"	m	class:DeviationMatrix
get_inverse	denavitTolerancingBasicObjects.py	/^    def get_inverse(self):$/;"	m	class:GapMatrix
get_inverse	denavitTolerancingBasicObjects.py	/^    def get_inverse(self):$/;"	m	class:TransformationMatrix
get_j4_rotation_matrix	denavitTolerancingBasicObjects.py	/^    def get_j4_rotation_matrix(self):$/;"	m	class:GapMatrix
get_matrix	denavitTolerancingBasicObjects.py	/^    def get_matrix(self) -> List[sp.MatrixBase]:$/;"	m	class:DeviationMatrix
get_matrix	denavitTolerancingBasicObjects.py	/^    def get_matrix(self) -> List[sp.MatrixBase]:$/;"	m	class:GapMatrix
get_matrix	denavitTolerancingBasicObjects.py	/^    def get_matrix(self) -> sp.MatrixBase:$/;"	m	class:I4
get_matrix	denavitTolerancingBasicObjects.py	/^    def get_matrix(self) -> sp.MatrixBase:$/;"	m	class:J4
get_matrix	denavitTolerancingBasicObjects.py	/^    def get_matrix(self) -> sp.MatrixBase:$/;"	m	class:TransformationMatrix
get_matrix_inverse	denavitTolerancingBasicObjects.py	/^    def get_matrix_inverse(self) -> List[sp.MatrixBase]:$/;"	m	class:DeviationMatrix
get_matrix_inverse	denavitTolerancingBasicObjects.py	/^    def get_matrix_inverse(self) -> List[sp.MatrixBase]:$/;"	m	class:GapMatrix
get_matrix_inverse	denavitTolerancingBasicObjects.py	/^    def get_matrix_inverse(self) -> sp.MatrixBase:$/;"	m	class:I4
get_matrix_inverse	denavitTolerancingBasicObjects.py	/^    def get_matrix_inverse(self) -> sp.MatrixBase:$/;"	m	class:J4
get_matrix_inverse	denavitTolerancingBasicObjects.py	/^    def get_matrix_inverse(self) -> sp.MatrixBase:$/;"	m	class:TransformationMatrix
get_relevant_expressions	symbolicFunctionHandlers.py	/^def get_relevant_expressions(m: sp.MatrixBase) -> List[sp.Expr]:$/;"	f
get_symbol_coef_map	symbolicFunctionHandlers.py	/^def get_symbol_coef_map(expr: sp.Expr, rnd: int = 8) -> Dict[str, float]:$/;"	f
get_symbols_in_expressions	symbolicFunctionHandlers.py	/^def get_symbols_in_expressions($/;"	f
get_variables	denavitTolerancingBasicObjects.py	/^    def get_variables(self) -> List[sp.Symbol]:$/;"	m	class:DeviationMatrix
get_variables	denavitTolerancingBasicObjects.py	/^    def get_variables(self) -> List[sp.Symbol]:$/;"	m	class:GapMatrix
hex_to_rgba	customPlotting.py	/^def hex_to_rgba(hex_color: str, alpha: float = 1.0) -> Tuple[int, int, int, float]:$/;"	f
inverse_mstring	denavitTolerancingBasicObjects.py	/^def inverse_mstring(matrix_str: str) -> str:$/;"	f
is_affine_transformation_matrix	geometryFunctions.py	/^def is_affine_transformation_matrix(M: np.ndarray) -> bool:$/;"	f
is_bounding_box_within	geometryFunctions.py	/^def is_bounding_box_within(bbox1: np.ndarray, bbox2: np.ndarray) -> bool:$/;"	f
is_point_facing	interfaceLoopHandling.py	/^    def is_point_facing($/;"	m	class:SurfaceInteractionManager
level	__init__.py	/^    level=logging.DEBUG,$/;"	v
line_plane_intersection	geometryFunctions.py	/^def line_plane_intersection($/;"	f
parse_matrix_string	symbolicFunctionHandlers.py	/^def parse_matrix_string(matrix_str: str) -> Dict[str, Union[str, bool]]:$/;"	f
plane_parameters	geometryFunctions.py	/^def plane_parameters(point_on_plane: np.ndarray, rotation_matrix: np.ndarray) -> tuple:$/;"	f
plot_points_3D	customPlotting.py	/^def plot_points_3D($/;"	f
point_dict_to_arrays	geometryFunctions.py	/^def point_dict_to_arrays(point_dict: Dict[str, Union[np.array, Tuple, List]]):$/;"	f
point_in_hull	geometryFunctions.py	/^def point_in_hull(point: np.ndarray, hull: np.ndarray) -> bool:$/;"	f
point_plane_distance	geometryFunctions.py	/^def point_plane_distance($/;"	f
point_to_segment_distance	geometryFunctions.py	/^def point_to_segment_distance($/;"	f
points_in_cylinder	geometryFunctions.py	/^def points_in_cylinder($/;"	f
points_in_cylinder_vect	geometryFunctions.py	/^def points_in_cylinder_vect($/;"	f
process_cylinder_cylinder_interaction	interfaceLoopHandling.py	/^    def process_cylinder_cylinder_interaction($/;"	m	class:SurfaceInteractionManager
process_plane_plane_interaction	interfaceLoopHandling.py	/^    def process_plane_plane_interaction($/;"	m	class:SurfaceInteractionManager
process_surface_interactions	interfaceLoopHandling.py	/^    def process_surface_interactions(self, part_id, surface_id, surface_data):$/;"	m	class:SurfaceInteractionManager
read_loc_stamp	matrixListsFromSystemData.py	/^    def read_loc_stamp(self, loc_stamp: str) -> Tuple[str, str, str]:$/;"	m	class:MatrixListsFromSystemData
round_floats_in_expression	symbolicFunctionHandlers.py	/^def round_floats_in_expression(ex: sp.Expr, rnd: int = 6) -> sp.Expr:$/;"	f
spheres_from_point_cloud	customPlotting.py	/^def spheres_from_point_cloud($/;"	f
tfrt	impreciseTolerancingMiscMethods.py	/^def tfrt(*args):$/;"	f
transform_point	geometryFunctions.py	/^def transform_point(point: np.ndarray, transformation_matrix: np.ndarray) -> np.ndarray:$/;"	f
transformation_from_rotation_translation	impreciseTolerancingMiscMethods.py	/^def transformation_from_rotation_translation($/;"	f
tree	__init__.py	/^tree = lambda: defaultdict(tree)$/;"	v
validateOptimizationResults	toleranceAnalysisMatrixPreparer.py	/^    def validateOptimizationResults($/;"	m	class:ToleranceAnalysisMatrixPreparer
validate_dict_keys	constants.py	/^def validate_dict_keys($/;"	f
validate_loop_element	matrixListsFromSystemData.py	/^    def validate_loop_element(self, loop_element: str) -> bool:$/;"	m	class:MatrixListsFromSystemData
validate_point_dict	systemDataAugmented.py	/^    def validate_point_dict(self, point_dict: Dict[str, Union[Tuple, np.ndarray]]):$/;"	m	class:SystemDataAugmented
validate_system_data_structure	systemDataAugmented.py	/^    def validate_system_data_structure(self):$/;"	m	class:SystemDataAugmented
